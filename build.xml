<?xml version="1.0" encoding="UTF-8"?>
<project name="symfony3-project" basedir="." default="build">
    <!-- Properties -->

    <!-- DIRS -->
    <property name="dir.app" value="${project.basedir}/app" />
    <property name="dir.src" value="${project.basedir}/src" />
    <property name="dir.build" value="${project.basedir}/build" />
    <property name="dir.build.logs" value="${dir.build}/logs" />

    <!-- PHP CONFIG -->
    <property name="php.interpreter" value="php56" />
    <property name="composer.name" value="composer.phar" />

    <!-- OTHER -->
    <property name="php_cs.bin" value="${project.basedir}/vendor/bin/phpcs" />
    <property name="php_cs.standards" value="${project.basedir}/standards/Symfony2/ruleset.xml" />
    <property name="php_md.bin" value="${project.basedir}/vendor/bin/phpmd" />
    <property name="php_md.standards" value="${project.basedir}/standards/PHPMessDetector/ruleset.xml" />
    <property name="php_cpd.bin" value="${project.basedir}/vendor/bin/phpcpd" />

    <!-- DIRTY CODE LIMITS -->
    <property name="code_sniffer.limit" value="5" />
    <property name="mess_detector.limit" value="5" />
    <property name="copy_paste.limit" value="5" />

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${dir.src}">
        <include name="**/*.php" />
    </fileset>

    <!-- Default target -->
    <target name="build"
            depends="prepare, composer, lint, php-cs-threshold-check, php-md-threshold-check, php-cpd-threshold-check"
            description="Run all test and build everything" />

    <!-- PREPARE BUILD -->
    <target name="prepare" description="Prepare build folders">
        <delete dir="${dir.build.logs}" />
        <mkdir dir="${dir.build.logs}" />
    </target>

    <!-- COMPOSER -->
    <target name="composer" description="Prepare build folders">
        <exec command="${composer.name} install" />
    </target>

    <!-- LINT -->
    <target name="lint" description="Run PHP lint on all *.php files in code directory.">
        <echo message="Check for syntax errors" />
        <phplint haltonfailure="true" interpreter="${php.interpreter}">
            <fileset refid="sourcecode" />
        </phplint>
    </target>

    <!-- PHP CODE SNIFFER -->
    <target name="php-cs" description="Find coding standard violations using PHP_CodeSniffer and create a log file for the CI server.">
        <echo message="PHP_CodeSniffer" />
        <exec command="${php_cs.bin} --extensions=php --report=checkstyle --report-file=${project.basedir}/build/logs/symfony2_cs.xml --standard=${php_cs.standards} ${dir.src}" logoutput="true" />
    </target>

    <target name="php-cs-threshold-check">
        <exec command="${php_cs.bin} --extensions=php --report=csv --standard=${php_cs.standards} ${dir.src} | tail -n +2 | wc -l" logoutput="true" outputProperty="checkstyle_violations" />
        <exec command="test ${checkstyle_violations} -lt ${code_sniffer.limit}" logoutput="true" checkreturn="true" />
    </target>

    <!-- PHP MESS DETECTOR -->

    <target name="phpmd" description="Perform project mess detection using PHPMD and create a log file for the CI server.">
        <exec command="${php_md.bin} ${dir.src} xml ${php_md.standards} --reportfile ${dir.build}/logs/phpmd.xml" logoutput="true" />
    </target>

    <target name="php-md-threshold-check">
        <exec command="${php_md.bin} ${dir.src} xml ${php_md.standards} | xmllint --xpath 'count(//violation)' -" logoutput="true" outputProperty="mess_violations" />
        <exec command="test ${mess_violations} -lt ${mess_detector.limit}" logoutput="true" checkreturn="true" />
    </target>

    <!-- PHP COPY PASTE DETECTOR -->
    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec command="${php_cpd.bin} --log-pmd ${dir.build.logs}/pmd-cpd.xml ${dir.src} --exclude Tests" logoutput="true"/>
    </target>

    <target name="php-cpd-threshold-check" description="Find duplicate code using PHPCPD">
        <exec command="${php_cpd.bin} ${dir.src} --exclude Tests | egrep 'Found [0-9]+ exact clones' -o  | egrep [0-9]+ -o || echo 0" logoutput="true" outputProperty="copy_paste_violations" />
        <exec command="test ${copy_paste_violations} -lt ${copy_paste.limit}" logoutput="true" checkreturn="true" />
    </target>


    <!-- Symfony2 code sniffer -->
    <!--<target name="check:cs" description="Checks coding standard.">-->
        <!--<echo msg="Checking coding standard ..." />-->
        <!--<exec command=""-->
    <!--</target>-->

</project>