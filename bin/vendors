#!/usr/bin/env php
<?php

/*
 * This file is part of the Symfony Standard Edition.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

$rootDir = dirname(__DIR__);
$vendorDir = $rootDir.'/vendor';

array_shift($argv);
if (!isset($argv[0])) {
    exit(<<<EOF
Symfony2 vendors script management.

Specify a command to run:

 install: install vendors as specified in deps or deps.lock (recommended)
 update:  update vendors to their latest versions (as specified in deps)


EOF
    );
}

if (!in_array($command = array_shift($argv), array('install', 'update'))) {
    exit(sprintf("Command \"%s\" does not exist.\n", $command));
}

/*
 * Check wether this project is based on the Standard Edition that was
 * shipped with vendors or not.
 */
if (is_dir($vendorDir.'/symfony') && !is_dir($vendorDir.'/symfony/.git') && !in_array('--reinstall', $argv)) {
    exit(<<<EOF
Your project seems to be based on a Standard Edition that includes vendors.

Try to run ./bin/vendors install --reinstall


EOF
    );
}

if (!is_dir($vendorDir)) {
    echo "> Create vendor dir\n";
    if (!mkdir($vendorDir, 0777, true)) {
        exit(sprintf("Failed to create vendor directory \"%s\"\n", $vendorDir));
    }
    echo "\n";
}

// versions
$versions = array();
if ('install' === $command && file_exists($rootDir.'/deps.lock')) {
    foreach (file($rootDir.'/deps.lock', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        $parts = array_values(array_filter(explode(' ', $line)));
        if (2 !== count($parts)) {
            exit(sprintf("The deps version file is not valid (near \"%s\")\n", $line));
        }
        $versions[$parts[0]] = $parts[1];
    }
}

$newversions = array();
$deps = parse_ini_file($rootDir.'/deps', true, INI_SCANNER_RAW);
if (false === $deps) {
    exit("The deps file is not valid ini syntax. Perhaps missing a trailing newline?\n");
}

echo ">>> Process dependencies:\n\n";

foreach ($deps as $name => $dep) {
    $dep = array_map('trim', $dep);

    // revision
    if (isset($versions[$name])) {
        $rev = $versions[$name];
    } else {
        $rev = isset($dep['version']) ? $dep['version'] : 'origin/HEAD';
    }
    
    echo "> Installing/Updating $name\n";

    // install dir
    $installDir = isset($dep['target']) ? $vendorDir.'/'.$dep['target'] : $vendorDir.'/'.$name;
    echo sprintf("> (%s)\n", $installDir);
    
    if (in_array('--reinstall', $argv)) {
        if (PHP_OS == 'WINNT') {
            system(sprintf('rmdir /S /Q %s', escapeshellarg(realpath($installDir))), $exitCode);
        } else {
            system(sprintf('rm -rf %s', escapeshellarg($installDir)), $exitCode);
        }
        if ($exitCode !== 0) {
            exit(sprintf("Could not reinstall \"%s\" dependency, directory \"%s\" could not be removed\n", $name, $installDir));
        }
    }

    // url
    if (!isset($dep['git'])) {
        exit(sprintf("The \"git\" value for the \"%s\" dependency must be set.\n", $name));
    }
    $url = $dep['git'];

    // clone if dependency repository doesn't exist yet
    if (!is_dir($installDir)) {
        echo sprintf("> \"%s\" is a new dependency, clone from git repository \"%s\"\n", $name, $url, $installDir);
        system(sprintf('git clone %s %s', escapeshellarg($url), escapeshellarg($installDir)), $exitCode);
        if ($exitCode !== 0) {
            exit(sprintf("Could not clone \"%s\" dependency into \"%s\"\n", $name, $installDir));
        }
    }

    // check for valid git repository (we could check this somehow with a git call but a simple check for existence of
    // .git subdirectory works for now)
    if (!is_dir($installDir.'/.git')) {
        exit(sprintf("Directory for \"%s\" dependency is not the root of a git repository (\".git\" directory missing in \"%s\")\n", $name, $installDir));
    }

    // set dependency repository to specified revision
    system(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($installDir), escapeshellarg($rev)), $exitCode);
    if ($exitCode !== 0) {
        exit(sprintf("Could not set \"%s\" dependency to revision \"%s\"\n", $name, $rev));
    }

    // for update, fetch revision from dependency repository
    if ('update' === $command) {
        ob_start();
        system(sprintf('cd %s && git log -n 1 --format=%%H', escapeshellarg($installDir)), $exitCode);
        if ($exitCode !== 0) {
            exit(sprintf("Could not get revision info for \"%s\" dependency\n", $name));
        }
        $newversions[] = trim($name.' '.ob_get_clean());
    }

    echo "\n";
}

echo ">>> Post-processing:\n\n";

// update?
if ('update' === $command) {
    echo "> Update deps.lock\n";
    $depsLockFile = $rootDir.'/deps.lock';
    if (file_put_contents($depsLockFile, implode("\n", $newversions)) === false) {
        exit(sprintf("Could not write versions to \"%s\"\n", $depsLockFile));
    }
    echo "\n";
}

// php on windows can't use the shebang line from system()
$interpreter = PHP_OS == 'WINNT' ? 'php.exe' : '';

// Update the bootstrap files
echo "> Update bootstrap files\n";
system(sprintf('%s %s', $interpreter, escapeshellarg($rootDir.'/vendor/bundles/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php')));
echo "\n";

// Update assets
echo "> Update assets\n";
system(sprintf('%s %s assets:install %s', $interpreter, escapeshellarg($rootDir.'/app/console'), escapeshellarg($rootDir.'/web/')));
echo "\n";

// Remove the cache
echo "> Clear cache\n";
system(sprintf('%s %s cache:clear --no-warmup', $interpreter, escapeshellarg($rootDir.'/app/console')));
echo "\n";

echo ">>> Done.\n";

